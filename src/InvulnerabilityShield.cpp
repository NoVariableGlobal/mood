#include "InvulnerabilityShield.h"
#include "ComponentsManager.h"
#include "Entity.h"
#include "FactoriesFactory.h"
#include "LifeC.h"
#include "Scene.h"
#include "SoundComponent.h"
#include <json.h>

void InvulnerabilityShield::setEffect(bool value) {

    soundManager_->playSound("Shield");
    Entity* player = scene_->getEntityById("Player");
    auto playerHealth = reinterpret_cast<LifeC*>(player->getComponent("LifeC"));
    playerHealth->setInvulnerability(value);
}

std::string InvulnerabilityShield::getName() { return "InvulnerabilityShield"; }

// FACTORY INFRASTRUCTURE DEFINITION

InvulnerabilityShieldFactory::InvulnerabilityShieldFactory() = default;

Component* InvulnerabilityShieldFactory::create(Entity* _father,
                                                Json::Value& _data,
                                                Scene* scene) {
    InvulnerabilityShield* invulnerability_Shield = new InvulnerabilityShield();

    invulnerability_Shield->setFather(_father);
    invulnerability_Shield->setScene(scene);
    invulnerability_Shield->setSoundManager();

    scene->getComponentsManager()->addEC(invulnerability_Shield);

    if (!_data["time"].isDouble())
        throw std::exception("InvulnerabilityShield: time is not a double");
    invulnerability_Shield->setDuration(_data["time"].asDouble());

    if (!_data["timeEffect"].isDouble())
        throw std::exception(
            "InvulnerabilityShield: timeEffect is not a double");
    invulnerability_Shield->setDuration(_data["timeEffect"].asDouble());

    invulnerability_Shield->setHeadsUpDisplayName("ShieldHUD");

    invulnerability_Shield->setActive(true);

    return invulnerability_Shield;
};

DEFINE_FACTORY(InvulnerabilityShield);
